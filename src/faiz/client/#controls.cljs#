(ns faiz.client.controls
  (:require [crate.core :as crate])
  (:use-macros [crate.def-macros :only [defpartial defelem]]))

(defpartial link [{:keys [text uri action]}]
  [:li [:a {:href uri :data-action action} text]])

(defpartial button [{:keys [text class action id]}]
  [:button {:class class :data-action-type "click" :data-action action :id id} text])

(defpartial form [legend-text buttons & controls]
  [:div.form-horizontal
   [:fieldset [:legend legend-text]
    (flatten controls)
    [:div.form-actions
    buttons]]])

(defn chrome [{:keys [name label-text controls]}]
  [:div.control-group
   [:label.control-label {:for name} label-text]
   [:div.controls controls]])

(defpartial text-input
  [{:keys [name label-text placeholder-text input-class help-text] :or {input-class "input-xlarge" help-text nil}}]
  (let [placeholder-text (if placeholder-text placeholder-text label-text)]
  [:div.control-group
   [:label.control-label {:for name} label-text]
   [:div.controls
    [:input {:type "text" :class input-class :id name :placeholder placeholder-text :data-action-type "change"}]
    (if help-text [:p.help-block help-text] nil)]]))

(defpartial select-list [{:keys [name label-text options]}]
  [:div.control-group
   [:label.control-label {:for name} label-text]
   [:div.controls
    [:select {:id name :data-action-type "change"}
     (for [o options] [:option o])]]])

(defn selection [{:keys [name value text type class]}]
  [:label {:class (str type " " class)}
   [:input {:id name :type type :name name :value value :data-action-type "change"}] text])

(defpartial checkboxes [{:keys [name label-text options class]}]
  [:div.control-group
   [:label.control-label {:for "name"} label-text]
   [:div.controls (for [o options] (selection (merge o {:name name :type "checkbox" :class class})))]])

(defpartial radio-buttons [{:keys [name label-text options class]}]
  [:div.control-group
   [:label.control-label {:for "name"} label-text]
   [:div.controls (for [o options] (selection (merge o {:name name :type "radio" :class class})))]])

(defpartial textarea
  [{:keys [name label-text placeholder-text input-class help-text] :or {input-class "input-xlarge" help-text nil}}]
  (let [placeholder-text (if placeholder-text placeholder-text label-text)]
  [:div.control-group
   [:label.control-label {:for name} label-text]
   [:div.controls
    [:textarea {:type "text" :class input-class :id name :placeholder placeholder-text :data-action-type "change"
                :rows 3 :style "margin-top: 0px; margin-bottom: 0px; height: 54px; margin-left: 0px; margin-right: 0px; width: 270px;"}]
    (if help-text [:p.help-block help-text] nil)]]))

(defpartial hero-unit [{:keys [h p]}]
  [:div.hero-unit
   [:h1 h]
   [:p p]])
